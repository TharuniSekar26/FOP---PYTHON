class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None


class DoublyCircularLinkedList:
    def __init__(self):
        self.head = None


    def append(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            new_node.next = new_node
            new_node.prev = new_node
        else:
            new_node.prev = self.head.prev
            new_node.next = self.head
            self.head.prev.next = new_node
            self.head.prev = new_node


    def prepend(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            new_node.next = new_node
            new_node.prev = new_node
        else:
            new_node.next = self.head
            new_node.prev = self.head.prev
            self.head.prev.next = new_node
            self.head.prev = new_node
            self.head = new_node


    def print_list(self):
        if self.head is None:
            return
        curr = self.head
        while True:
            print(curr.data, end=" ")
            curr = curr.next
            if curr == self.head:
                break
        print()


    def print_list_reverse(self):
        if self.head is None:
            return
        curr = self.head.prev
        while True:
            print(curr.data, end=" ")
            curr = curr.prev
            if curr == self.head.prev:
                break
        print()


# Example usage
dll = DoublyCircularLinkedList()
dll.append(1)
dll.append(2)
dll.append(3)
dll.prepend(0)


dll.print_list()  # Output: 0 1 2 3


dll.print_list_reverse()  # Output: 3 2 1 0


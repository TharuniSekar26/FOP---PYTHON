class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class Queue:
    def __init__(self):
        self.front = None
        self.rear = None


    def enqueue(self, data):
        new_node = Node(data)
        if self.rear is None:
            self.front = self.rear = new_node
        else:
            self.rear.next = new_node
            self.rear = new_node


    def dequeue(self):
        if self.front is None:
            return None
        dequeued_node = self.front
        self.front = self.front.next
        if self.front is None:
            self.rear = None
        return dequeued_node.data


    def peek(self):
        if self.front is None:
            return None
        return self.front.data


    def is_empty(self):
        return self.front is None


    def size(self):
        count = 0
        curr = self.front
        while curr:
            count += 1
            curr = curr.next
        return count


# Example usage
queue = Queue()
print(queue.is_empty())  # Output: True

queue.enqueue(1)
queue.enqueue(2)
queue.enqueue(3)
print(queue.size())  # Output: 3
print(queue.peek())  # Output: 1

dequeued = queue.dequeue()
print(dequeued)  # Output: 1
print(queue.size())  # Output: 2
print(queue.is_empty())  # Output: False
